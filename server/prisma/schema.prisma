generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id         String   @id @default(uuid()) 
  username   String   @unique
  email      String   @unique
  password   String
  prn_number String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  posts      Post[]  
  forums     Forum[]  
  comments   Comment[]
}

model Alumni {
  id        String   @id @default(uuid()) 
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]  
  forums    Forum[]  
  jobs      Job[]    
  comments  Comment[]
}

model Admin {
  id        String   @id @default(uuid()) 
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]  
  forums    Forum[]  
  events    Event[]  
  comments  Comment[]
}

model Post {
  id            String   @id @default(uuid()) 
  title         String   
  description   String   
  featuredImage String   
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  studentId     String?  
  alumniId      String?  
  adminId       String?  

  student       Student? @relation(fields: [studentId], references: [id])
  alumni        Alumni?  @relation(fields: [alumniId], references: [id])
  admin         Admin?   @relation(fields: [adminId], references: [id])

  comments      Comment[]
}

model Forum {
  id            String   @id @default(uuid()) 
  title         String   
  content       String  
  featuredImage String   
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  studentId     String?  
  alumniId      String?  
  adminId       String?  

  student       Student? @relation(fields: [studentId], references: [id])
  alumni        Alumni?  @relation(fields: [alumniId], references: [id])
  admin         Admin?   @relation(fields: [adminId], references: [id])

  comments      Comment[]
}

model Event {
  id          String   @id @default(uuid()) 
  title       String   
  description String  
  date        DateTime 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  adminId     String  
  admin       Admin    @relation(fields: [adminId], references: [id])
}

model Job {
  id          String   @id @default(uuid())
  title       String
  description String
  company     String
  location    String
  salary      String
  expired     Boolean  @default(false) 

  postedById  String  
  postedBy    Alumni  @relation(fields: [postedById], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id          String   @id @default(uuid())
  content     String  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  postId      String?  
  forumId     String?  

  studentId   String?  
  alumniId    String?  
  adminId     String?  

  post        Post?    @relation(fields: [postId], references: [id])
  forum       Forum?   @relation(fields: [forumId], references: [id])

  student     Student? @relation(fields: [studentId], references: [id])
  alumni      Alumni?  @relation(fields: [alumniId], references: [id])
  admin       Admin?   @relation(fields: [adminId], references: [id])
}
